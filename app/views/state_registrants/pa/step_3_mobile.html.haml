= render 'shared/signature_capture/scripts'
- content_for :head do
  :javascript
    $(document).ready(function() {
      function togglePenndotNumber() {
        if ($("#state_registrants_pa_registrant_confirm_no_penndot_number:checked").length > 0) {
          $("#penndot_set").hide();
          // if (!window.IS_TOUCH_ENABLED) {
          //   $("#signature_upload").show();
          // }
        } else {
          $("#penndot_set").show();
          
          // $("#signature_upload").hide();
        }              
      }

      function toggleSsn4() {
        if ($("#state_registrants_pa_registrant_confirm_no_dl_or_ssn:checked").length > 0 ) {
          $(".registrant-form__ssn4__line").hide();
        } else {
          $(".registrant-form__ssn4__line").show();
        }
      }
      
      function toggleAssistant() {
        if ($("#state_registrants_pa_registrant_has_assistant:checked").length > 0) {
          $("#assistant_set").show();
        } else {
          $("#assistant_set").hide();
        }        
      }
      
      
      $("#state_registrants_pa_registrant_confirm_no_penndot_number").click(togglePenndotNumber)
      togglePenndotNumber();      
      $("#state_registrants_pa_registrant_confirm_no_dl_or_ssn").click(toggleSsn4)
      toggleSsn4();      
      $("#state_registrants_pa_registrant_has_assistant").click(toggleAssistant)
      toggleAssistant();
    });


= flash_messages.html_safe
      
= form_for(@registrant, url: update_state_registrant_path(@registrant.to_param,controller.current_state)) do |form|

  = render partial: 'state_registrants/locale_selector', locals: {form: form }

  = render partial: 'state_registrants/header_mobile', locals: {percentage: 50}


  
  .dynamic-step#step-6
    %fieldset
      %legend= t('txt.registration.mobile_ui.step_8.title')
    
  
    %fieldset#penndot_set
      %ul.flat.penndot-number
        - if @registrant.penndot_retries > 0
          - @registrant.errors.add(:penndot_number, :pa_invalid)
        = field_li(form, :penndot_number, {skip_tooltip: true, required: true, field_options: {size: 12, maxlength: 8}, li_options: {class: "registrant-form__penndot-number__line"} })
          
      %p.instructions
        = I18n.t('states.custom.pa.penndot_number_instructions')

  
    
    = render partial: 'registrants/generic/checkbox', locals: {form: form, field: :confirm_no_penndot_number, class_name: "registrant-form__no-penndot-number__line", required: false}

    = render partial: 'shared/signature_capture/form', locals: {form: form}
    
    %br
    %br
    %fieldset#ssn4_set
      %ul.flat.ssn4
        = field_li(form, :ssn4, {skip_tooltip: true, required: false, li_options: {class: "registrant-form__ssn4__line"}, field_options: {type: "number", size: 6, maxlength: 4} })
      
      = render partial: 'registrants/generic/checkbox', locals: {form: form, field: :confirm_no_dl_or_ssn, class_name: "registrant-form__no-ssn4__line", required: false}
      
    
    = render partial: 'registrants/generic/checkbox', locals: {form: form, field: :has_assistant, class_name: "registrant-form__has-assistant__line", required: false}
    
    %fieldset#assistant_set
      %ul.stacked
        = field_li(form, :assistant_name, {skip_tooltip: true, required: true, li_options: {class: "registrant-form__assistant-name__line"} })
      %ul.stacked
        = field_li(form, :assistant_address, {skip_tooltip: true, required: true, li_options: {class: "registrant-form__assistant-address__line"} })
      %ul.stacked
        = field_li(form, :assistant_phone, {skip_tooltip: true, required: true, li_options: {class: "registrant-form__assistant-phone__line"} })
    
      .declaration-text
        = t('states.custom.pa.assistant_declaration').html_safe
      = render partial: 'registrants/generic/checkbox', locals: {form: form, field: :confirm_assistant_declaration, class_name: "registrant-form__assistant-confirmation__line", required: true}


  .dynamic-navigation
    -# .back only shown when first step, .prepare only shown when last step
    .back.back--link
      .button.rollover_button
        = link_to update_state_registrant_path(@registrant.to_param, controller.prev_step) do
          %button{type: "button"}
            %span <

    .next.next--link.prepare
      = rollover_button(:next_step, I18n.t('txt.button.submit').html_safe) 
  